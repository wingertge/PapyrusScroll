/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.genguava.papyrusscroll.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.genguava.papyrusscroll.lexer.PapyrusTokenTypes;
import com.intellij.openapi.util.text.StringUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Papyrus.flex</tt>
 */
class _PapyrusLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PENDING_DOCSTRING = 2;
  public static final int IN_DOCSTRING_OWNER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15616 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\1\1\7\12\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\21\12\12\1\23"+
    "\1\12\1\24\1\23\1\12\1\25\1\23\1\12\1\26\1\27\1\12\1\30\1\31\1\1\1\30\4\12"+
    "\1\32\6\12\1\33\1\34\1\35\1\1\3\12\1\36\6\12\1\15\1\37\2\12\1\40\2\12\1\41"+
    "\1\1\1\12\1\42\4\1\1\12\1\43\1\1\1\44\1\21\7\12\1\45\1\23\1\33\1\46\1\34\1"+
    "\47\1\50\1\51\1\45\1\15\1\52\1\46\1\34\1\53\1\54\1\55\1\56\1\57\1\60\1\21"+
    "\1\34\1\61\1\62\1\63\1\45\1\64\1\65\1\46\1\34\1\61\1\66\1\67\1\45\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\56\1\1\1\77\1\100\1\34\1\101\1\102\1\103\1\45"+
    "\1\1\1\77\1\100\1\34\1\104\1\102\1\105\1\45\1\106\1\107\1\100\1\12\1\36\1"+
    "\110\1\111\1\45\1\112\1\113\1\114\1\12\1\115\1\116\1\117\1\56\1\120\1\23\2"+
    "\12\1\30\1\121\1\122\2\1\1\123\1\124\1\125\1\126\1\127\1\130\2\1\1\63\1\131"+
    "\1\122\1\132\1\133\1\12\1\134\1\23\1\135\1\133\1\12\1\134\1\136\3\1\4\12\1"+
    "\122\4\12\1\137\2\12\1\140\2\12\1\141\24\12\1\142\1\143\2\12\1\142\2\12\1"+
    "\144\1\145\1\13\3\12\1\145\3\12\1\36\2\1\1\12\1\1\5\12\1\146\1\23\45\12\1"+
    "\147\1\12\1\23\1\30\4\12\1\150\1\151\1\152\1\153\1\12\1\153\1\12\1\154\1\152"+
    "\1\155\5\12\1\156\1\122\1\1\1\157\1\122\5\12\1\25\2\12\1\30\4\12\1\57\1\12"+
    "\1\121\2\42\1\56\1\12\1\41\1\153\2\12\1\42\1\12\1\160\1\122\2\1\1\12\1\42"+
    "\3\12\1\121\1\12\1\147\2\122\1\161\1\121\4\1\4\12\1\42\1\122\1\162\1\154\3"+
    "\12\1\37\3\12\1\154\3\12\1\25\1\163\1\37\1\12\1\41\1\151\4\1\1\164\1\12\1"+
    "\165\17\12\1\166\21\12\1\146\2\12\1\146\1\167\1\12\1\41\3\12\1\170\1\171\1"+
    "\172\1\134\1\171\3\1\1\173\1\63\1\174\1\1\1\175\1\1\1\134\3\1\2\12\1\63\1"+
    "\176\1\177\1\200\1\201\1\202\1\1\2\12\1\151\62\1\1\203\2\12\1\160\161\1\2"+
    "\12\1\121\2\12\1\121\10\12\1\204\1\154\2\12\1\140\3\12\1\205\1\173\1\12\1"+
    "\206\4\207\2\12\2\1\1\173\35\1\1\210\1\1\1\23\1\211\1\23\4\12\1\212\1\23\4"+
    "\12\1\141\1\213\1\12\1\41\1\23\4\12\1\121\1\1\1\12\1\30\3\1\1\12\40\1\133"+
    "\12\1\57\4\1\135\12\1\57\2\1\10\12\1\134\4\1\2\12\1\41\20\12\1\134\1\12\1"+
    "\214\1\1\3\12\1\215\7\12\1\15\1\1\1\216\1\217\5\12\1\220\1\12\1\121\1\25\3"+
    "\1\1\216\2\12\1\25\1\1\3\12\1\154\4\12\1\57\1\122\1\12\1\221\1\37\1\12\1\41"+
    "\2\12\1\154\1\12\1\134\4\12\1\222\1\122\1\12\1\223\3\12\1\206\1\41\1\122\1"+
    "\12\1\114\4\12\1\31\1\157\1\12\1\224\1\225\1\226\1\207\2\12\1\141\1\57\7\12"+
    "\1\227\1\122\72\12\1\154\1\12\1\230\2\12\1\42\20\1\26\12\1\41\6\12\1\160\2"+
    "\1\1\206\1\231\1\34\1\232\1\233\6\12\1\15\1\1\1\234\25\12\1\41\1\1\4\12\1"+
    "\217\2\12\1\25\2\1\1\42\1\12\1\1\1\12\1\235\1\236\2\1\1\135\7\12\1\134\1\1"+
    "\1\122\1\23\1\237\1\23\1\30\1\203\4\12\1\121\1\240\1\241\2\1\1\242\1\12\1"+
    "\13\1\243\2\41\2\1\7\12\1\30\4\1\3\12\1\153\7\1\1\244\10\1\1\12\1\134\3\12"+
    "\2\63\1\1\2\12\1\1\1\12\1\30\2\12\1\30\1\12\1\41\2\12\1\245\1\246\2\1\11\12"+
    "\1\41\1\122\2\12\1\245\1\12\1\42\2\12\1\25\3\12\1\154\11\1\23\12\1\206\1\12"+
    "\1\57\1\25\11\1\1\247\2\12\1\250\1\12\1\57\1\12\1\206\1\12\1\121\4\1\1\12"+
    "\1\251\1\12\1\57\1\12\1\160\4\1\3\12\1\252\4\1\1\253\1\254\1\12\1\255\2\1"+
    "\1\12\1\134\1\12\1\134\2\1\1\133\1\12\1\206\1\1\3\12\1\57\1\12\1\57\1\12\1"+
    "\31\1\12\1\15\6\1\4\12\1\151\3\1\3\12\1\31\3\12\1\31\60\1\4\12\1\206\1\1\1"+
    "\56\1\173\3\12\1\30\1\1\1\12\1\151\1\122\3\12\1\256\1\1\2\12\1\257\4\12\1"+
    "\260\1\261\2\1\1\12\1\21\1\12\1\262\4\1\1\263\1\26\1\151\3\12\1\30\1\122\1"+
    "\33\1\46\1\34\1\61\1\66\1\264\1\265\1\153\10\1\4\12\1\30\1\122\2\1\4\12\1"+
    "\266\1\122\12\1\3\12\1\267\1\63\1\270\2\1\4\12\1\271\1\122\2\1\3\12\1\25\1"+
    "\122\3\1\1\12\1\101\1\42\1\122\26\1\4\12\1\122\1\173\34\1\3\12\1\151\20\1"+
    "\1\34\2\12\1\13\1\63\1\122\1\1\1\217\1\12\1\217\1\133\1\206\64\1\71\12\1\160"+
    "\6\1\6\12\1\121\1\1\14\12\1\154\53\1\2\12\1\121\75\1\44\12\1\206\33\1\43\12"+
    "\1\151\1\12\1\121\1\122\6\1\1\12\1\41\1\153\3\12\1\206\1\154\1\122\1\234\1"+
    "\272\1\12\67\1\4\12\1\153\2\12\1\121\1\173\1\12\4\1\1\63\1\1\76\12\1\134\1"+
    "\1\57\12\1\31\20\1\1\15\77\1\6\12\1\30\1\134\1\151\1\273\114\1\1\274\1\275"+
    "\1\276\1\1\1\277\11\1\1\300\33\1\5\12\1\135\3\12\1\152\1\301\1\302\1\303\3"+
    "\12\1\304\1\305\1\12\1\306\1\307\1\100\24\12\1\267\1\12\1\100\1\141\1\12\1"+
    "\141\1\12\1\135\1\12\1\135\1\121\1\12\1\121\1\12\1\34\1\12\1\34\1\12\1\310"+
    "\3\311\40\1\3\12\1\230\2\12\1\134\1\312\1\174\1\162\1\23\25\1\1\13\1\220\1"+
    "\313\75\1\14\12\1\153\1\206\2\1\4\12\1\30\1\122\112\1\1\303\1\12\1\314\1\315"+
    "\1\316\1\317\1\320\1\321\1\322\1\42\1\323\1\42\47\1\1\12\1\160\1\12\1\160"+
    "\1\12\1\160\47\1\55\12\1\206\2\1\103\12\1\153\15\12\1\41\150\12\1\15\25\1"+
    "\41\12\1\41\56\1\17\12\41\1");

  /* The ZZ_CMAP_A table has 3392 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\21\1\7\1\0\1\10\1\5\22\0\1\20\1\57\1\17\2\0\1\54\1\60\1\15\1\62\1"+
    "\63\1\53\1\50\1\66\1\52\1\13\1\6\1\1\11\2\1\0\1\4\1\55\1\51\1\56\2\0\1\11"+
    "\2\14\2\11\1\14\13\11\1\14\2\11\1\14\5\11\1\64\1\16\1\65\1\0\1\3\1\0\1\22"+
    "\1\42\1\35\1\31\1\30\1\41\1\44\1\46\1\36\2\11\1\33\1\40\1\32\1\26\1\37\1\11"+
    "\1\27\1\23\1\25\1\24\1\43\1\45\1\47\1\34\1\11\1\0\1\61\15\0\1\11\12\0\1\11"+
    "\4\0\1\11\5\0\27\11\1\0\12\11\4\0\14\11\16\0\5\11\7\0\1\11\1\0\1\11\1\0\5"+
    "\11\1\0\2\11\2\0\4\11\1\0\1\11\6\0\1\11\1\0\3\11\1\0\1\11\1\0\4\11\1\0\23"+
    "\11\1\0\11\11\1\0\26\11\2\0\1\11\6\0\10\11\10\0\16\11\1\0\1\11\1\0\2\11\1"+
    "\0\2\11\1\0\1\11\10\0\13\11\5\0\3\11\15\0\12\12\4\0\6\11\1\0\10\11\2\0\12"+
    "\11\1\0\6\11\12\12\3\11\2\0\14\11\2\0\3\11\12\12\14\11\4\0\1\11\5\0\16\11"+
    "\2\0\14\11\4\0\5\11\1\0\10\11\6\0\20\11\2\0\12\12\1\11\2\0\16\11\1\0\1\11"+
    "\3\0\4\11\2\0\11\11\2\0\2\11\2\0\4\11\10\0\1\11\4\0\2\11\1\0\1\11\1\0\3\11"+
    "\1\0\6\11\4\0\2\11\1\0\2\11\1\0\2\11\1\0\2\11\2\0\1\11\1\0\5\11\4\0\2\11\2"+
    "\0\3\11\3\0\1\11\7\0\4\11\1\0\1\11\7\0\12\12\6\11\13\0\3\11\1\0\11\11\1\0"+
    "\2\11\1\0\2\11\1\0\5\11\2\0\12\11\1\0\3\11\1\0\3\11\2\0\1\11\30\0\1\11\7\0"+
    "\3\11\1\0\10\11\2\0\6\11\2\0\2\11\2\0\3\11\10\0\2\11\4\0\2\11\1\0\1\11\1\0"+
    "\1\11\20\0\2\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0\2\11\1\0\1\11\1\0\2\11\3\0"+
    "\2\11\3\0\3\11\3\0\14\11\4\0\5\11\3\0\3\11\1\0\4\11\2\0\1\11\6\0\1\11\10\0"+
    "\4\11\1\0\10\11\1\0\3\11\1\0\30\11\3\0\10\11\1\0\3\11\1\0\4\11\7\0\2\11\1"+
    "\0\3\11\5\0\4\11\1\0\5\11\2\0\4\11\5\0\2\11\7\0\1\11\2\0\2\11\16\0\3\11\1"+
    "\0\10\11\1\0\7\11\1\0\3\11\1\0\5\11\5\0\4\11\7\0\1\11\12\0\6\11\2\0\2\11\1"+
    "\0\22\11\3\0\10\11\1\0\11\11\1\0\1\11\2\0\7\11\3\0\1\11\4\0\6\11\1\0\1\11"+
    "\1\0\10\11\2\0\2\11\14\0\17\11\1\0\12\12\7\0\2\11\1\0\1\11\2\0\2\11\1\0\1"+
    "\11\2\0\1\11\6\0\4\11\1\0\7\11\1\0\3\11\1\0\1\11\1\0\1\11\2\0\2\11\1\0\15"+
    "\11\1\0\3\11\2\0\5\11\1\0\1\11\1\0\6\11\2\0\12\12\2\0\4\11\10\0\2\11\13\0"+
    "\1\11\1\0\1\11\1\0\1\11\4\0\12\11\1\0\24\11\3\0\5\11\1\0\12\11\6\0\1\11\11"+
    "\0\12\12\4\11\2\0\6\11\1\0\1\11\5\0\1\11\2\0\13\11\1\0\15\11\1\0\4\11\2\0"+
    "\7\11\1\0\1\11\1\0\4\11\2\0\1\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0\16"+
    "\11\2\0\6\11\2\0\15\11\2\0\14\11\3\0\13\11\7\0\15\11\1\0\7\11\13\0\4\11\14"+
    "\0\1\11\1\0\2\11\14\0\4\11\3\0\1\11\4\0\2\11\15\0\3\11\2\0\12\11\15\0\1\11"+
    "\23\0\5\11\12\12\3\0\6\11\1\0\23\11\1\0\2\11\6\0\6\11\5\0\15\11\1\0\1\11\1"+
    "\0\1\11\1\0\1\11\1\0\6\11\1\0\7\11\1\0\1\11\3\0\3\11\1\0\7\11\3\0\4\11\2\0"+
    "\6\11\23\0\1\11\4\0\1\11\14\0\1\11\15\0\1\11\2\0\1\11\4\0\1\11\2\0\12\11\1"+
    "\0\1\11\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0\13\11\2\0\4\11\5"+
    "\0\5\11\4\0\1\11\7\0\17\11\6\0\15\11\7\0\10\11\11\0\7\11\1\0\7\11\6\0\3\11"+
    "\11\0\5\11\2\0\5\11\3\0\7\11\2\0\2\11\2\0\3\11\5\0\13\11\12\12\2\11\4\0\3"+
    "\11\1\0\12\11\1\0\1\11\7\0\11\11\2\0\27\11\2\0\15\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\16\0\1\11\12\12\5\11\3\0\5\11\12\0\6\11\2\0\6\11\2\0\6\11\11\0\13\11"+
    "\1\0\2\11\2\0\7\11\4\0\5\11\3\0\5\11\5\0\12\11\1\0\5\11\1\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\12\11\3\0\15\11\3\0\2\11\30\0\16\11\4\0\1\11\2\0\6\11\2\0\6"+
    "\11\2\0\6\11\2\0\3\11\3\0\14\11\1\0\16\11\1\0\2\11\1\0\1\11\15\0\1\11\2\0"+
    "\4\11\4\0\10\11\1\0\5\11\12\0\6\11\2\0\1\11\1\0\14\11\1\0\2\11\3\0\1\11\2"+
    "\0\4\11\1\0\2\11\12\0\10\11\6\0\6\11\1\0\2\11\5\0\10\11\1\0\3\11\1\0\13\11"+
    "\4\0\3\11\4\0\6\11\1\0\12\12\4\11\2\0\1\11\11\0\5\11\5\0\3\11\3\0\12\12\1"+
    "\11\1\0\1\11\3\0\10\11\6\0\1\11\1\0\7\11\1\0\1\11\1\0\4\11\1\0\2\11\6\0\1"+
    "\11\5\0\7\11\2\0\7\11\3\0\6\11\1\0\1\11\10\0\6\11\2\0\10\11\10\0\6\11\2\0"+
    "\1\11\3\0\1\11\13\0\10\11\5\0\15\11\3\0\2\11\6\0\5\11\3\0\6\11\10\0\10\11"+
    "\2\0\7\11\16\0\4\11\4\0\3\11\15\0\1\11\2\0\2\11\2\0\4\11\1\0\14\11\1\0\1\11"+
    "\1\0\7\11\1\0\21\11\1\0\4\11\2\0\10\11\1\0\7\11\1\0\14\11\1\0\4\11\1\0\5\11"+
    "\1\0\1\11\3\0\11\11\1\0\10\11\2\0\22\12\5\0\1\11\12\0\2\11\1\0\2\11\1\0\5"+
    "\11\6\0\2\11\1\0\1\11\2\0\1\11\1\0\12\11\1\0\4\11\1\0\1\11\1\0\1\11\6\0\1"+
    "\11\4\0\1\11\1\0\1\11\1\0\1\11\1\0\3\11\1\0\2\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\2\11\1\0\1\11\2\0\4\11\1\0\7\11\1\0\4\11\1"+
    "\0\4\11\1\0\1\11\1\0\12\11\1\0\5\11\1\0\3\11\1\0\5\11\1\0\5\11");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\3\1\11\1\12\1\11\1\13\1\14\14\3"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\2\1\1\25\1\26\1\27\1\30\1\31\1\3\2\11"+
    "\3\3\2\0\1\32\1\0\1\33\1\32\1\3\1\34"+
    "\3\11\1\35\17\3\1\36\10\3\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\3"+
    "\3\11\1\3\1\0\1\3\1\0\15\3\1\51\1\52"+
    "\12\3\1\53\2\3\1\54\1\3\1\55\7\3\1\56"+
    "\3\3\1\57\6\3\1\60\3\3\1\61\5\3\1\62"+
    "\4\3\1\63\5\3\1\64\1\3\1\65\1\3\1\66"+
    "\1\3\1\67\1\3\1\70\5\3\1\71\1\3\1\72"+
    "\1\73\1\74\2\3\1\75\7\3\1\76\4\3\1\77"+
    "\1\100\2\3\1\101\1\102\1\103\5\3\1\104\3\3"+
    "\1\105\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\245\0\245\0\u01ef\0\u0226\0\u025d\0\245\0\u0294"+
    "\0\245\0\245\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de"+
    "\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596"+
    "\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e"+
    "\0\245\0\245\0\245\0\245\0\245\0\u0785\0\u07bc\0\u07f3"+
    "\0\u082a\0\u0861\0\u0898\0\334\0\u08cf\0\u01ef\0\u0906\0\245"+
    "\0\u093d\0\u0974\0\245\0\u09ab\0\u09e2\0\u0a19\0\u014a\0\u0a50"+
    "\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u014a\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\245"+
    "\0\245\0\245\0\245\0\245\0\245\0\245\0\245\0\245"+
    "\0\245\0\u0f41\0\245\0\u0f78\0\u0faf\0\u0fe6\0\u01ef\0\u101d"+
    "\0\u09ab\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e"+
    "\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u014a\0\u014a"+
    "\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0"+
    "\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u014a\0\u15ea\0\u014a"+
    "\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2"+
    "\0\u17d9\0\u1810\0\u1847\0\u014a\0\u187e\0\u18b5\0\u18ec\0\u1923"+
    "\0\u195a\0\u1991\0\u014a\0\u19c8\0\u19ff\0\u1a36\0\u014a\0\u1a6d"+
    "\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u014a\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u014a\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u014a"+
    "\0\u1d6f\0\u014a\0\u1da6\0\u014a\0\u1ddd\0\u014a\0\u1e14\0\u014a"+
    "\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u014a\0\u1f5e\0\u014a"+
    "\0\u014a\0\u014a\0\u1f95\0\u1fcc\0\u014a\0\u2003\0\u203a\0\u2071"+
    "\0\u20a8\0\u20df\0\u2116\0\u214d\0\u014a\0\u2184\0\u21bb\0\u21f2"+
    "\0\u2229\0\u014a\0\u014a\0\u2260\0\u2297\0\u014a\0\u014a\0\u014a"+
    "\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u014a\0\u23e1\0\u2418"+
    "\0\u244f\0\u014a\0\u014a\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\4\1\11\1\12"+
    "\1\13\1\7\1\4\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\15\1\25\1\7\1\26"+
    "\1\27\1\7\1\30\2\7\1\15\1\31\1\32\1\7"+
    "\1\33\1\34\1\7\1\35\1\36\2\7\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\4\0\1\10\2\0"+
    "\1\12\1\13\5\0\1\17\1\0\1\21\1\22\45\0"+
    "\1\4\1\5\1\6\1\7\1\10\1\4\1\11\1\12"+
    "\1\13\1\7\1\4\1\14\1\56\1\57\1\17\1\60"+
    "\1\21\1\22\1\23\1\24\1\56\1\25\1\7\1\61"+
    "\1\27\1\7\1\30\2\7\1\56\1\31\1\32\1\7"+
    "\1\62\1\63\1\7\1\35\1\36\2\7\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\70\0\2\64\1\65"+
    "\7\0\1\66\54\0\2\6\1\67\7\0\1\66\54\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\26\7\17\0"+
    "\5\10\1\0\1\10\1\0\57\10\51\0\1\70\16\0"+
    "\2\71\65\0\3\7\5\0\2\7\1\0\1\72\1\16"+
    "\1\0\1\20\2\0\2\7\1\72\2\7\1\72\5\7"+
    "\1\72\3\7\2\72\5\7\17\0\5\16\1\0\1\16"+
    "\1\73\5\16\1\74\1\75\50\16\5\20\1\0\1\20"+
    "\1\73\6\20\1\76\1\74\47\20\1\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\1\7\1\77\1\100\23\7"+
    "\20\0\3\7\5\0\2\7\1\0\1\7\5\0\3\7"+
    "\1\101\2\7\1\102\4\7\1\103\12\7\20\0\3\7"+
    "\5\0\2\7\1\0\1\7\5\0\5\7\1\104\20\7"+
    "\20\0\3\7\5\0\2\7\1\0\1\72\1\16\1\0"+
    "\1\20\2\0\2\7\1\72\2\7\1\72\1\105\4\7"+
    "\1\72\3\7\2\72\5\7\20\0\3\7\5\0\2\7"+
    "\1\0\1\7\5\0\10\7\1\106\1\107\7\7\1\110"+
    "\3\7\1\111\20\0\3\7\5\0\2\7\1\0\1\7"+
    "\5\0\1\112\3\7\1\113\1\7\1\114\17\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\10\7\1\115"+
    "\5\7\1\116\1\117\6\7\20\0\3\7\5\0\2\7"+
    "\1\0\1\7\5\0\1\120\4\7\1\121\20\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\72\1\16\1\0\1\20"+
    "\2\0\1\122\1\7\1\123\2\7\1\72\3\7\1\124"+
    "\1\7\1\72\3\7\2\72\5\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\72\1\16\1\0\1\20\2\0\2\7"+
    "\1\72\1\7\1\125\1\72\5\7\1\72\3\7\2\72"+
    "\5\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\11\7\1\126\14\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\24\7\1\127\1\7\70\0\1\130\66\0"+
    "\1\131\66\0\1\132\66\0\1\133\66\0\1\134\66\0"+
    "\1\135\66\0\1\136\66\0\1\137\75\0\1\140\67\0"+
    "\1\141\6\0\3\7\5\0\2\7\1\0\1\142\1\57"+
    "\1\0\1\60\2\0\2\7\1\142\2\7\1\142\5\7"+
    "\1\142\3\7\2\142\5\7\17\0\5\57\1\0\1\57"+
    "\1\0\5\57\1\143\1\144\50\57\5\60\1\0\1\60"+
    "\1\0\6\60\1\145\1\143\47\60\1\0\3\7\5\0"+
    "\2\7\1\0\1\142\1\57\1\0\1\60\2\0\2\7"+
    "\1\142\2\7\1\142\1\105\4\7\1\142\3\7\2\142"+
    "\5\7\20\0\3\7\5\0\2\7\1\0\1\142\1\57"+
    "\1\0\1\60\2\0\1\122\1\7\1\146\2\7\1\142"+
    "\3\7\1\124\1\7\1\142\3\7\2\142\5\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\142\1\57\1\0\1\60"+
    "\2\0\2\7\1\142\1\7\1\125\1\142\5\7\1\142"+
    "\3\7\2\142\5\7\20\0\2\64\65\0\2\6\65\0"+
    "\2\71\1\147\64\0\3\7\5\0\2\7\1\0\1\150"+
    "\1\16\1\0\1\20\2\0\2\7\1\150\2\7\1\150"+
    "\5\7\1\150\3\7\2\150\5\7\23\0\1\73\2\0"+
    "\1\73\6\0\1\73\1\0\2\151\45\0\67\16\67\20"+
    "\1\0\3\7\5\0\2\7\1\0\1\7\5\0\3\7"+
    "\1\152\22\7\20\0\3\7\5\0\2\7\1\0\1\7"+
    "\5\0\1\153\4\7\1\154\20\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\11\7\1\155\14\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\5\7\1\156"+
    "\20\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\2\7\1\157\23\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\3\7\1\160\22\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\7\7\1\161\16\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\1\7\1\162"+
    "\24\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\6\7\1\163\17\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\3\7\1\164\22\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\3\7\1\165\22\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\10\7\1\166"+
    "\15\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\23\7\1\167\2\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\3\7\1\170\22\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\15\7\1\171\10\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\5\7\1\172"+
    "\20\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\4\7\1\173\21\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\11\7\1\174\14\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\150\1\16\1\0\1\20\2\0\2\7"+
    "\1\150\2\7\1\150\2\7\1\175\2\7\1\150\3\7"+
    "\2\150\5\7\20\0\3\7\5\0\2\7\1\0\1\7"+
    "\5\0\4\7\1\176\21\7\20\0\3\7\5\0\2\7"+
    "\1\0\1\7\5\0\4\7\1\177\21\7\20\0\3\7"+
    "\5\0\2\7\1\0\1\7\5\0\4\7\1\200\21\7"+
    "\20\0\3\7\5\0\2\7\1\0\1\7\5\0\14\7"+
    "\1\201\11\7\20\0\3\7\5\0\2\7\1\0\1\202"+
    "\1\57\1\0\1\60\2\0\2\7\1\202\2\7\1\202"+
    "\5\7\1\202\3\7\2\202\5\7\17\0\67\57\67\60"+
    "\1\0\3\7\5\0\2\7\1\0\1\202\1\57\1\0"+
    "\1\60\2\0\2\7\1\202\2\7\1\202\2\7\1\175"+
    "\2\7\1\202\3\7\2\202\5\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\1\16\1\0\1\20\2\0\26\7"+
    "\20\0\3\7\5\0\2\7\1\0\1\7\5\0\4\7"+
    "\1\203\21\7\20\0\3\7\5\0\2\7\1\0\1\7"+
    "\5\0\3\7\1\204\22\7\20\0\3\7\5\0\2\7"+
    "\1\0\1\7\5\0\14\7\1\205\11\7\20\0\3\7"+
    "\5\0\2\7\1\0\1\7\5\0\17\7\1\206\6\7"+
    "\20\0\3\7\5\0\2\7\1\0\1\7\5\0\14\7"+
    "\1\207\11\7\20\0\3\7\5\0\2\7\1\0\1\7"+
    "\5\0\6\7\1\210\17\7\20\0\3\7\5\0\2\7"+
    "\1\0\1\7\5\0\2\7\1\211\23\7\20\0\3\7"+
    "\5\0\2\7\1\0\1\7\5\0\1\7\1\212\4\7"+
    "\1\213\5\7\1\214\1\215\1\7\1\216\3\7\1\217"+
    "\2\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\6\7\1\220\17\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\10\7\1\221\15\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\6\7\1\222\17\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\14\7\1\223"+
    "\11\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\6\7\1\224\17\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\4\7\1\225\21\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\6\7\1\226\17\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\15\7\1\227"+
    "\10\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\1\7\1\230\24\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\13\7\1\231\12\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\1\232\25\7\20\0\3\7"+
    "\5\0\2\7\1\0\1\7\5\0\11\7\1\233\14\7"+
    "\20\0\3\7\5\0\2\7\1\0\1\7\5\0\20\7"+
    "\1\234\5\7\20\0\3\7\5\0\2\7\1\0\1\7"+
    "\5\0\11\7\1\235\14\7\20\0\3\7\5\0\2\7"+
    "\1\0\1\7\1\57\1\0\1\60\2\0\26\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\5\7\1\236"+
    "\20\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\6\7\1\237\17\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\10\7\1\240\15\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\15\7\1\241\10\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\5\7\1\242"+
    "\20\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\3\7\1\243\22\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\21\7\1\244\4\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\17\7\1\245\6\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\5\7\1\246"+
    "\20\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\2\7\1\247\23\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\24\7\1\250\1\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\14\7\1\251\11\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\3\7\1\252"+
    "\22\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\10\7\1\253\15\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\21\7\1\254\4\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\5\7\1\255\20\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\10\7\1\256"+
    "\15\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\6\7\1\257\17\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\6\7\1\260\17\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\3\7\1\261\22\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\3\7\1\262"+
    "\22\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\1\263\25\7\20\0\3\7\5\0\2\7\1\0\1\7"+
    "\5\0\6\7\1\264\17\7\20\0\3\7\5\0\2\7"+
    "\1\0\1\7\5\0\6\7\1\265\17\7\20\0\3\7"+
    "\5\0\2\7\1\0\1\7\5\0\22\7\1\266\3\7"+
    "\20\0\3\7\5\0\2\7\1\0\1\7\5\0\3\7"+
    "\1\267\22\7\20\0\3\7\5\0\2\7\1\0\1\7"+
    "\5\0\10\7\1\270\15\7\20\0\3\7\5\0\2\7"+
    "\1\0\1\7\5\0\1\271\25\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\6\7\1\272\17\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\4\7\1\273"+
    "\21\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\10\7\1\274\15\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\14\7\1\275\11\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\17\7\1\276\6\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\7\7\1\277"+
    "\16\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\6\7\1\300\17\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\3\7\1\301\22\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\3\7\1\302\22\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\5\7\1\303"+
    "\20\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\14\7\1\304\11\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\11\7\1\305\14\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\1\306\25\7\20\0\3\7"+
    "\5\0\2\7\1\0\1\7\5\0\10\7\1\307\15\7"+
    "\20\0\3\7\5\0\2\7\1\0\1\7\5\0\3\7"+
    "\1\310\22\7\20\0\3\7\5\0\2\7\1\0\1\7"+
    "\5\0\10\7\1\311\15\7\20\0\3\7\5\0\2\7"+
    "\1\0\1\7\5\0\15\7\1\312\10\7\20\0\3\7"+
    "\5\0\2\7\1\0\1\7\5\0\13\7\1\313\12\7"+
    "\20\0\3\7\5\0\2\7\1\0\1\7\5\0\11\7"+
    "\1\314\14\7\20\0\3\7\5\0\2\7\1\0\1\7"+
    "\5\0\1\7\1\315\24\7\20\0\3\7\5\0\2\7"+
    "\1\0\1\7\5\0\3\7\1\316\22\7\20\0\3\7"+
    "\5\0\2\7\1\0\1\7\5\0\4\7\1\317\21\7"+
    "\20\0\3\7\5\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\320\16\7\20\0\3\7\5\0\2\7\1\0\1\7"+
    "\5\0\1\321\25\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\6\7\1\322\17\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\3\7\1\323\22\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\6\7\1\324"+
    "\17\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\3\7\1\325\22\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\6\7\1\326\17\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\12\7\1\327\13\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\10\7\1\330"+
    "\15\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\4\7\1\331\21\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\16\7\1\332\7\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\5\7\1\333\20\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\14\7\1\334"+
    "\11\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\10\7\1\335\15\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\6\7\1\336\17\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\3\7\1\337\22\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\4\7\1\340"+
    "\21\7\20\0\3\7\5\0\2\7\1\0\1\7\5\0"+
    "\11\7\1\341\14\7\20\0\3\7\5\0\2\7\1\0"+
    "\1\7\5\0\12\7\1\342\13\7\20\0\3\7\5\0"+
    "\2\7\1\0\1\7\5\0\10\7\1\343\15\7\20\0"+
    "\3\7\5\0\2\7\1\0\1\7\5\0\12\7\1\344"+
    "\13\7\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9350];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\5\1\2\11\3\1\1\11\1\1\2\11"+
    "\26\1\5\11\6\1\2\0\1\1\1\0\1\11\2\1"+
    "\1\11\34\1\12\11\1\1\1\11\3\1\1\0\1\1"+
    "\1\0\173\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private int getSpaceLength(CharSequence string) {
String string1 = string.toString();
string1 = StringUtil.trimEnd(string1, "\\");
string1 = StringUtil.trimEnd(string1, ";");
final String s = StringUtil.trimTrailing(string1);
return yylength()-s.length();

}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _PapyrusLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return PapyrusTokenTypes.BAD_CHARACTER;
            } 
            // fall through
          case 72: break;
          case 2: 
            { return PapyrusTokenTypes.INTEGER_LITERAL;
            } 
            // fall through
          case 73: break;
          case 3: 
            { return PapyrusTokenTypes.IDENTIFIER;
            } 
            // fall through
          case 74: break;
          case 4: 
            { return PapyrusTokenTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 75: break;
          case 5: 
            { return PapyrusTokenTypes.DIV;
            } 
            // fall through
          case 76: break;
          case 6: 
            { return PapyrusTokenTypes.LINE_BREAK;
            } 
            // fall through
          case 77: break;
          case 7: 
            { return PapyrusTokenTypes.FORMFEED;
            } 
            // fall through
          case 78: break;
          case 8: 
            { return PapyrusTokenTypes.DOT;
            } 
            // fall through
          case 79: break;
          case 9: 
            { return PapyrusTokenTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 80: break;
          case 10: 
            { return PapyrusTokenTypes.BACKSLASH;
            } 
            // fall through
          case 81: break;
          case 11: 
            { return PapyrusTokenTypes.SPACE;
            } 
            // fall through
          case 82: break;
          case 12: 
            { return PapyrusTokenTypes.TAB;
            } 
            // fall through
          case 83: break;
          case 13: 
            { return PapyrusTokenTypes.PLUS;
            } 
            // fall through
          case 84: break;
          case 14: 
            { return PapyrusTokenTypes.EQ;
            } 
            // fall through
          case 85: break;
          case 15: 
            { return PapyrusTokenTypes.MINUS;
            } 
            // fall through
          case 86: break;
          case 16: 
            { return PapyrusTokenTypes.MULT;
            } 
            // fall through
          case 87: break;
          case 17: 
            { return PapyrusTokenTypes.PERC;
            } 
            // fall through
          case 88: break;
          case 18: 
            { return PapyrusTokenTypes.LT;
            } 
            // fall through
          case 89: break;
          case 19: 
            { return PapyrusTokenTypes.GT;
            } 
            // fall through
          case 90: break;
          case 20: 
            { return PapyrusTokenTypes.NOT;
            } 
            // fall through
          case 91: break;
          case 21: 
            { return PapyrusTokenTypes.LPAR;
            } 
            // fall through
          case 92: break;
          case 22: 
            { return PapyrusTokenTypes.RPAR;
            } 
            // fall through
          case 93: break;
          case 23: 
            { return PapyrusTokenTypes.LBRACKET;
            } 
            // fall through
          case 94: break;
          case 24: 
            { return PapyrusTokenTypes.RBRACKET;
            } 
            // fall through
          case 95: break;
          case 25: 
            { return PapyrusTokenTypes.COMMA;
            } 
            // fall through
          case 96: break;
          case 26: 
            { return PapyrusTokenTypes.FLOAT_LITERAL;
            } 
            // fall through
          case 97: break;
          case 27: 
            { return PapyrusTokenTypes.DIVEQ;
            } 
            // fall through
          case 98: break;
          case 28: 
            { yypushback(getSpaceLength(yytext())); return PapyrusTokenTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 99: break;
          case 29: 
            { return PapyrusTokenTypes.AS_KEYWORD;
            } 
            // fall through
          case 100: break;
          case 30: 
            { return PapyrusTokenTypes.IF_KEYWORD;
            } 
            // fall through
          case 101: break;
          case 31: 
            { return PapyrusTokenTypes.PLUSEQ;
            } 
            // fall through
          case 102: break;
          case 32: 
            { return PapyrusTokenTypes.EQEQ;
            } 
            // fall through
          case 103: break;
          case 33: 
            { return PapyrusTokenTypes.MINUSEQ;
            } 
            // fall through
          case 104: break;
          case 34: 
            { return PapyrusTokenTypes.MULTEQ;
            } 
            // fall through
          case 105: break;
          case 35: 
            { return PapyrusTokenTypes.PERCEQ;
            } 
            // fall through
          case 106: break;
          case 36: 
            { return PapyrusTokenTypes.LE;
            } 
            // fall through
          case 107: break;
          case 37: 
            { return PapyrusTokenTypes.GE;
            } 
            // fall through
          case 108: break;
          case 38: 
            { return PapyrusTokenTypes.NE;
            } 
            // fall through
          case 109: break;
          case 39: 
            { return PapyrusTokenTypes.AND;
            } 
            // fall through
          case 110: break;
          case 40: 
            { return PapyrusTokenTypes.OR;
            } 
            // fall through
          case 111: break;
          case 41: 
            { return PapyrusTokenTypes.NEW_KEYWORD;
            } 
            // fall through
          case 112: break;
          case 42: 
            { return PapyrusTokenTypes.INT_KEYWORD;
            } 
            // fall through
          case 113: break;
          case 43: 
            { return PapyrusTokenTypes.AUTO_KEYWORD;
            } 
            // fall through
          case 114: break;
          case 44: 
            { return PapyrusTokenTypes.SELF_KEYWORD;
            } 
            // fall through
          case 115: break;
          case 45: 
            { return PapyrusTokenTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 116: break;
          case 46: 
            { return PapyrusTokenTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 117: break;
          case 47: 
            { return PapyrusTokenTypes.NONE_KEYWORD;
            } 
            // fall through
          case 118: break;
          case 48: 
            { return PapyrusTokenTypes.BOOL_KEYWORD;
            } 
            // fall through
          case 119: break;
          case 49: 
            { return PapyrusTokenTypes.STATE_KEYWORD;
            } 
            // fall through
          case 120: break;
          case 50: 
            { return PapyrusTokenTypes.ENDIF_KEYWORD;
            } 
            // fall through
          case 121: break;
          case 51: 
            { return PapyrusTokenTypes.EVENT_KEYWORD;
            } 
            // fall through
          case 122: break;
          case 52: 
            { return PapyrusTokenTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 123: break;
          case 53: 
            { return PapyrusTokenTypes.FLOAT_KEYWORD;
            } 
            // fall through
          case 124: break;
          case 54: 
            { return PapyrusTokenTypes.WHILE_KEYWORD;
            } 
            // fall through
          case 125: break;
          case 55: 
            { return PapyrusTokenTypes.STR_KEYWORD;
            } 
            // fall through
          case 126: break;
          case 56: 
            { return PapyrusTokenTypes.RETURN_KEYWORD;
            } 
            // fall through
          case 127: break;
          case 57: 
            { return PapyrusTokenTypes.ELIF_KEYWORD;
            } 
            // fall through
          case 128: break;
          case 58: 
            { return PapyrusTokenTypes.NATIVE_KEYWORD;
            } 
            // fall through
          case 129: break;
          case 59: 
            { return PapyrusTokenTypes.IMPORT_KEYWORD;
            } 
            // fall through
          case 130: break;
          case 60: 
            { return PapyrusTokenTypes.PAR_KEYWORD;
            } 
            // fall through
          case 131: break;
          case 61: 
            { return PapyrusTokenTypes.GLOBAL_KEYWORD;
            } 
            // fall through
          case 132: break;
          case 62: 
            { return PapyrusTokenTypes.EXTENDS_KEYWORD;
            } 
            // fall through
          case 133: break;
          case 63: 
            { return PapyrusTokenTypes.ENST_KEYWORD;
            } 
            // fall through
          case 134: break;
          case 64: 
            { return PapyrusTokenTypes.ENEVT_KEYWORD;
            } 
            // fall through
          case 135: break;
          case 65: 
            { return PapyrusTokenTypes.ENWHI_KEYWORD;
            } 
            // fall through
          case 136: break;
          case 66: 
            { return PapyrusTokenTypes.PROP_KEYWORD;
            } 
            // fall through
          case 137: break;
          case 67: 
            { return PapyrusTokenTypes.FUN_KEYWORD;
            } 
            // fall through
          case 138: break;
          case 68: 
            { return PapyrusTokenTypes.SCNAM_KEYWORD;
            } 
            // fall through
          case 139: break;
          case 69: 
            { return PapyrusTokenTypes.ENPR_KEYWORD;
            } 
            // fall through
          case 140: break;
          case 70: 
            { return PapyrusTokenTypes.ENFUN_KEYWORD;
            } 
            // fall through
          case 141: break;
          case 71: 
            { return PapyrusTokenTypes.ARO_KEYWORD;
            } 
            // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
